/**
* bootstrap-formhelpers.js v2.3.0 by @vincentlamanna
* Copyright 2013 Vincent Lamanna
* http://www.apache.org/licenses/LICENSE-2.0
*/
if (!jQuery) throw new Error("Bootstrap Form Helpers requires jQuery"); BFHMonthsList = ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"], BFHDaysList = ["DOM", "LUN", "MAR", "MIE", "JUE", "VIE", "SAB"], BFHDayOfWeekStart = 0;
+function (a) { "use strict"; function b(a) { var b = a.toString(16); return 1 === b.length ? "0" + b : b } function c(a, c, d) { return "#" + b(a) + b(c) + b(d) } function d() { var b; a(f).each(function (c) { return b = e(a(this)), b.hasClass("open") ? (b.trigger(c = a.Event("hide.bfhcolorpicker")), c.isDefaultPrevented() ? !0 : (b.removeClass("open").trigger("hidden.bfhcolorpicker"), void 0)) : !0 }) } function e(a) { return a.closest(".bfh-colorpicker") } var f = "[data-toggle=bfh-colorpicker]", g = function (b, c) { this.options = a.extend({}, a.fn.bfhcolorpicker.defaults, c), this.$element = a(b), this.initPopover() }; g.prototype = { constructor: g, initPalette: function () { var a, b, c; a = this.$element.find("canvas"), b = a[0].getContext("2d"), c = b.createLinearGradient(0, 0, a.width(), 0), c.addColorStop(0, "rgb(255, 255, 255)"), c.addColorStop(.1, "rgb(255,   0,   0)"), c.addColorStop(.25, "rgb(255,   0, 255)"), c.addColorStop(.4, "rgb(0,     0, 255)"), c.addColorStop(.55, "rgb(0,   255, 255)"), c.addColorStop(.7, "rgb(0,   255,   0)"), c.addColorStop(.85, "rgb(255, 255,   0)"), c.addColorStop(1, "rgb(255,   0,   0)"), b.fillStyle = c, b.fillRect(0, 0, b.canvas.width, b.canvas.height), c = b.createLinearGradient(0, 0, 0, a.height()), c.addColorStop(0, "rgba(255, 255, 255, 1)"), c.addColorStop(.5, "rgba(255, 255, 255, 0)"), c.addColorStop(.5, "rgba(0,     0,   0, 0)"), c.addColorStop(1, "rgba(0,     0,   0, 1)"), b.fillStyle = c, b.fillRect(0, 0, b.canvas.width, b.canvas.height) }, initPopover: function () { var a, b; a = "", b = "", "right" === this.options.align ? b = '<span class="input-group-addon"><span class="bfh-colorpicker-icon"></span></span>' : a = '<span class="input-group-addon"><span class="bfh-colorpicker-icon"></span></span>', this.$element.html('<div class="input-group bfh-colorpicker-toggle" data-toggle="bfh-colorpicker">' + a + '<input type="text" name="' + this.options.name + '" class="' + this.options.input + '" placeholder="' + this.options.placeholder + '" readonly>' + b + "</div>" + '<div class="bfh-colorpicker-popover">' + '<canvas class="bfh-colorpicker-palette" width="384" height="256"></canvas>' + "</div>"), this.$element.on("click.bfhcolorpicker.data-api touchstart.bfhcolorpicker.data-api", f, g.prototype.toggle).on("mousedown.bfhcolorpicker.data-api", "canvas", g.prototype.mouseDown).on("click.bfhcolorpicker.data-api touchstart.bfhcolorpicker.data-api", ".bfh-colorpicker-popover", function () { return !1 }), this.initPalette(), this.$element.val(this.options.color) }, updateVal: function (a, b) { var d, e, f, g, h, i, j; h = 5, d = this.$element.find("canvas"), e = d[0].getContext("2d"), f = a - d.offset().left, g = b - d.offset().top, f = Math.round(f / h) * h, g = Math.round(g / h) * h, 0 > f && (f = 0), f >= d.width() && (f = d.width() - 1), 0 > g && (g = 0), g > d.height() && (g = d.height()), i = e.getImageData(f, g, 1, 1), j = c(i.data[0], i.data[1], i.data[2]), j !== this.$element.val() && (this.$element.val(j), this.$element.trigger("change.bfhcolorpicker")) }, mouseDown: function () { var b, c; b = a(this), c = e(b), a(document).on("mousemove.bfhcolorpicker.data-api", { colorpicker: c }, g.prototype.mouseMove).one("mouseup.bfhcolorpicker.data-api", { colorpicker: c }, g.prototype.mouseUp) }, mouseMove: function (a) { var b; b = a.data.colorpicker, b.data("bfhcolorpicker").updateVal(a.pageX, a.pageY) }, mouseUp: function (b) { var c; c = b.data.colorpicker, c.data("bfhcolorpicker").updateVal(b.pageX, b.pageY), a(document).off("mousemove.bfhcolorpicker.data-api"), c.data("bfhcolorpicker").options.close === !0 && d() }, toggle: function (b) { var c, f, g; if (c = a(this), f = e(c), f.is(".disabled") || void 0 !== f.attr("disabled")) return !0; if (g = f.hasClass("open"), d(), !g) { if (f.trigger(b = a.Event("show.bfhcolorpicker")), b.isDefaultPrevented()) return !0; f.toggleClass("open").trigger("shown.bfhcolorpicker"), c.focus() } return !1 } }; var h = a.fn.bfhcolorpicker; a.fn.bfhcolorpicker = function (b) { return this.each(function () { var c, d, e; c = a(this), d = c.data("bfhcolorpicker"), e = "object" == typeof b && b, this.type = "bfhcolorpicker", d || c.data("bfhcolorpicker", d = new g(this, e)), "string" == typeof b && d[b].call(c) }) }, a.fn.bfhcolorpicker.Constructor = g, a.fn.bfhcolorpicker.defaults = { align: "left", input: "form-control", placeholder: "", name: "", color: "#000000", close: !0 }, a.fn.bfhcolorpicker.noConflict = function () { return a.fn.bfhcolorpicker = h, this }; var i; a.valHooks.div && (i = a.valHooks.div), a.valHooks.div = { get: function (b) { return a(b).hasClass("bfh-colorpicker") ? a(b).find('input[type="text"]').val() : i ? i.get(b) : void 0 }, set: function (b, c) { if (a(b).hasClass("bfh-colorpicker")) a(b).find(".bfh-colorpicker-icon").css("background-color", c), a(b).find('input[type="text"]').val(c); else if (i) return i.set(b, c) } }, a(document).ready(function () { a("div.bfh-colorpicker").each(function () { var b; b = a(this), b.bfhcolorpicker(b.data()) }) }), a(document).on("click.bfhcolorpicker.data-api", d) }(window.jQuery), +function (a) { "use strict"; var b = function (b, c) { this.options = a.extend({}, a.fn.bfhcountries.defaults, c), this.$element = a(b), this.$element.is("select") && this.addCountries(), this.$element.hasClass("bfh-selectbox") && this.addBootstrapCountries(), this.$element.is("span") && this.displayCountry() }; b.prototype = { constructor: b, getCountries: function () { var b, c; if (this.options.available) { if ("string" == typeof this.options.available) { c = [], this.options.available = this.options.available.split(","); for (b in BFHCountriesList) BFHCountriesList.hasOwnProperty(b) && a.inArray(b, this.options.available) >= 0 && (c[b] = BFHCountriesList[b]) } else c = this.options.available; return c } return BFHCountriesList }, addCountries: function () { var a, b, c; a = this.options.country, c = this.getCountries(), this.$element.html(""), this.options.blank === !0 && this.$element.append('<option value=""></option>'); for (b in c) c.hasOwnProperty(b) && this.$element.append('<option value="' + b + '">' + c[b] + "</option>"); this.$element.val(a) }, addBootstrapCountries: function () { var a, b, c, d, e, f; d = this.options.country, a = this.$element.find('input[type="hidden"]'), b = this.$element.find(".bfh-selectbox-option"), c = this.$element.find("[role=option]"), f = this.getCountries(), c.html(""), this.options.blank === !0 && c.append('<li><a tabindex="-1" href="#" data-option=""></a></li>'); for (e in f) f.hasOwnProperty(e) && (this.options.flags === !0 ? c.append('<li><a tabindex="-1" href="#" data-option="' + e + '"><i class="fa bfh-flag-' + e + '"></i>' + f[e] + "</a></li>") : c.append('<li><a tabindex="-1" href="#" data-option="' + e + '">' + f[e] + "</a></li>")); this.$element.val(d) }, displayCountry: function () { var a; a = this.options.country, this.options.flags === !0 ? this.$element.html('<i class="fa bfh-flag-' + a + '"></i> ' + BFHCountriesList[a]) : this.$element.html(BFHCountriesList[a]) } }; var c = a.fn.bfhcountries; a.fn.bfhcountries = function (c) { return this.each(function () { var d, e, f; d = a(this), e = d.data("bfhcountries"), f = "object" == typeof c && c, e || d.data("bfhcountries", e = new b(this, f)), "string" == typeof c && e[c].call(d) }) }, a.fn.bfhcountries.Constructor = b, a.fn.bfhcountries.defaults = { country: "", available: "", flags: !1, blank: !0 }, a.fn.bfhcountries.noConflict = function () { return a.fn.bfhcountries = c, this }, a(document).ready(function () { a("form select.bfh-countries, span.bfh-countries, div.bfh-countries").each(function () { var b; b = a(this), b.hasClass("bfh-selectbox") && b.bfhselectbox(b.data()), b.bfhcountries(b.data()) }) }) }(window.jQuery), +function (a) { "use strict"; var b = function (b, c) { this.options = a.extend({}, a.fn.bfhcurrencies.defaults, c), this.$element = a(b), this.$element.is("select") && this.addCurrencies(), this.$element.hasClass("bfh-selectbox") && this.addBootstrapCurrencies(), this.$element.is("span") && this.displayCurrency() }; b.prototype = { constructor: b, getCurrencies: function () { var b, c; if (this.options.available) { c = [], this.options.available = this.options.available.split(","); for (b in BFHCurrenciesList) BFHCurrenciesList.hasOwnProperty(b) && a.inArray(b, this.options.available) >= 0 && (c[b] = BFHCurrenciesList[b]); return c } return BFHCurrenciesList }, addCurrencies: function () { var a, b, c; a = this.options.currency, c = this.getCurrencies(), this.$element.html(""), this.options.blank === !0 && this.$element.append('<option value=""></option>'); for (b in c) c.hasOwnProperty(b) && this.$element.append('<option value="' + b + '">' + c[b].label + "</option>"); this.$element.val(a) }, addBootstrapCurrencies: function () { var a, b, c, d, e, f, g; d = this.options.currency, a = this.$element.find('input[type="hidden"]'), b = this.$element.find(".bfh-selectbox-option"), c = this.$element.find("[role=option]"), f = this.getCurrencies(), c.html(""), this.options.blank === !0 && c.append('<li><a tabindex="-1" href="#" data-option=""></a></li>'); for (e in f) f.hasOwnProperty(e) && (this.options.flags === !0 ? (g = f[e].currencyflag ? f[e].currencyflag : e.substr(0, 2), c.append('<li><a tabindex="-1" href="#" data-option="' + e + '"><i class="fa bfh-flag-' + g + '"></i>' + f[e].label + "</a></li>")) : c.append('<li><a tabindex="-1" href="#" data-option="' + e + '">' + f[e].label + "</a></li>")); this.$element.val(d) }, displayCurrency: function () { var a, b; a = this.options.currency, this.options.flags === !0 ? (b = BFHCurrenciesList[a].currencyflag ? BFHCurrenciesList[a].currencyflag : a.substr(0, 2), this.$element.html('<i class="fa bfh-flag-' + b + '"></i> ' + BFHCurrenciesList[a].label)) : this.$element.html(BFHCurrenciesList[a].label) } }; var c = a.fn.bfhcurrencies; a.fn.bfhcurrencies = function (c) { return this.each(function () { var d, e, f; d = a(this), e = d.data("bfhcurrencies"), f = "object" == typeof c && c, e || d.data("bfhcurrencies", e = new b(this, f)), "string" == typeof c && e[c].call(d) }) }, a.fn.bfhcurrencies.Constructor = b, a.fn.bfhcurrencies.defaults = { currency: "", available: "", flags: !1, blank: !0 }, a.fn.bfhcurrencies.noConflict = function () { return a.fn.bfhcurrencies = c, this }, a(document).ready(function () { a("form select.bfh-currencies, span.bfh-currencies, div.bfh-currencies").each(function () { var b; b = a(this), b.hasClass("bfh-selectbox") && b.bfhselectbox(b.data()), b.bfhcurrencies(b.data()) }) }) }(window.jQuery), +function (a) { "use strict"; function b(a, b) { return new Date(b, a, 0).getDate() } function c(a, b, c) { return new Date(b, a, c).getDay() } function d(a, b, c, d) { return b += 1, b = String(b), d = String(d), 1 === b.length && (b = "0" + b), 1 === d.length && (d = "0" + d), a.replace("m", b).replace("y", c).replace("d", d) } function e(a, b, c) { var d, e, f; d = [{ part: "m", position: a.indexOf("m") }, { part: "y", position: a.indexOf("y") }, { part: "d", position: a.indexOf("d") }], d.sort(function (a, b) { return a.position - b.position }), f = b.match(/(\d+)/g); for (e in d) if (d.hasOwnProperty(e) && d[e].part === c) return Number(f[e]).toString() } function f() { var b; a(h).each(function (c) { return b = g(a(this)), b.hasClass("open") ? (b.trigger(c = a.Event("hide.bfhdatepicker")), c.isDefaultPrevented() ? !0 : (b.removeClass("open").trigger("hidden.bfhdatepicker"), void 0)) : !0 }) } function g(a) { return a.closest(".bfh-datepicker") } var h = "[data-toggle=bfh-datepicker]", i = function (b, c) { this.options = a.extend({}, a.fn.bfhdatepicker.defaults, c), this.$element = a(b), this.initCalendar() }; i.prototype = { constructor: i, setDate: function () { var a, b, c; a = this.options.date, c = this.options.format, "" === a || "today" === a || void 0 === a ? (b = new Date, "today" === a && this.$element.val(d(c, b.getMonth(), b.getFullYear(), b.getDate())), this.$element.data("month", b.getMonth()), this.$element.data("year", b.getFullYear())) : (this.$element.val(a), this.$element.data("month", Number(e(c, a, "m") - 1)), this.$element.data("year", Number(e(c, a, "y")))) }, setDateLimit: function (a, b) { var c, d; d = this.options.format, "" !== a ? (this.$element.data(b + "limit", !0), "today" === a ? (c = new Date, this.$element.data(b + "day", c.getDate()), this.$element.data(b + "month", c.getMonth()), this.$element.data(b + "year", c.getFullYear())) : (this.$element.data(b + "day", Number(e(d, a, "d"))), this.$element.data(b + "month", Number(e(d, a, "m") - 1)), this.$element.data(b + "year", Number(e(d, a, "y"))))) : this.$element.data(b + "limit", !1) }, initCalendar: function () { var a, b, c; a = "", b = "", c = "", "" !== this.options.icon && ("right" === this.options.align ? b = '<span class="input-group-addon"><i class="' + this.options.icon + '"></i></span>' : a = '<span class="input-group-addon"><i class="' + this.options.icon + '"></i></span>', c = "input-group"), this.$element.html('<div class="' + c + ' bfh-datepicker-toggle" data-toggle="bfh-datepicker">' + a + '<input type="text" name="' + this.options.name + '" class="' + this.options.input + '" placeholder="' + this.options.placeholder + '" readonly>' + b + "</div>" + '<div class="bfh-datepicker-calendar">' + '<table class="calendar table table-bordered">' + "<thead>" + '<tr class="months-header">' + '<th class="month" colspan="4">' + '<a class="previous" href="#"><i class="glyphicon glyphicon-chevron-left"></i></a>' + "<span></span>" + '<a class="next" href="#"><i class="glyphicon glyphicon-chevron-right"></i></a>' + "</th>" + '<th class="year" colspan="3">' + '<a class="previous" href="#"><i class="glyphicon glyphicon-chevron-left"></i></a>' + "<span></span>" + '<a class="next" href="#"><i class="glyphicon glyphicon-chevron-right"></i></a>' + "</th>" + "</tr>" + '<tr class="days-header">' + "</tr>" + "</thead>" + "<tbody>" + "</tbody>" + "</table>" + "</div>"), this.$element.on("click.bfhdatepicker.data-api touchstart.bfhdatepicker.data-api", h, i.prototype.toggle).on("click.bfhdatepicker.data-api touchstart.bfhdatepicker.data-api", ".bfh-datepicker-calendar > table.calendar .month > .previous", i.prototype.previousMonth).on("click.bfhdatepicker.data-api touchstart.bfhdatepicker.data-api", ".bfh-datepicker-calendar > table.calendar .month > .next", i.prototype.nextMonth).on("click.bfhdatepicker.data-api touchstart.bfhdatepicker.data-api", ".bfh-datepicker-calendar > table.calendar .year > .previous", i.prototype.previousYear).on("click.bfhdatepicker.data-api touchstart.bfhdatepicker.data-api", ".bfh-datepicker-calendar > table.calendar .year > .next", i.prototype.nextYear).on("click.bfhdatepicker.data-api touchstart.bfhdatepicker.data-api", ".bfh-datepicker-calendar > table.calendar td:not(.off)", i.prototype.select).on("click.bfhdatepicker.data-api touchstart.bfhdatepicker.data-api", ".bfh-datepicker-calendar > table.calendar", function () { return !1 }), this.setDate(), this.setDateLimit(this.options.min, "lower"), this.setDateLimit(this.options.max, "higher"), this.updateCalendar() }, updateCalendarHeader: function (a, b, c) { var d, e; for (a.find("table > thead > tr > th.month > span").text(BFHMonthsList[b]), a.find("table > thead > tr > th.year > span").text(c), d = a.find("table > thead > tr.days-header"), d.html(""), e = BFHDayOfWeekStart; e < BFHDaysList.length; e += 1) d.append("<th>" + BFHDaysList[e] + "</th>"); for (e = 0; BFHDayOfWeekStart > e; e += 1) d.append("<th>" + BFHDaysList[e] + "</th>") }, checkMinDate: function (a, b, c) { var d, e, f, g; return d = this.$element.data("lowerlimit"), d === !0 && (e = this.$element.data("lowerday"), f = this.$element.data("lowermonth"), g = this.$element.data("loweryear"), e > a && b === f && c === g || f > b && c === g || g > c) ? !0 : !1 }, checkMaxDate: function (a, b, c) { var d, e, f, g; return d = this.$element.data("higherlimit"), d === !0 && (e = this.$element.data("higherday"), f = this.$element.data("highermonth"), g = this.$element.data("higheryear"), a > e && b === f && c === g || b > f && c === g || c > g) ? !0 : !1 }, checkToday: function (a, b, c) { var d; return d = new Date, a === d.getDate() && b === d.getMonth() && c === d.getFullYear() ? !0 : !1 }, updateCalendarDays: function (a, d, e) { var f, g, h, i, j, k, l; for (f = a.find("table > tbody").html(""), g = b(d, e), h = b(d + 1, e), i = c(d, e, 1), j = c(d, e, h), k = "", l = 0; (i - BFHDayOfWeekStart + 7) % 7 > l; l += 1) k += '<td class="off">' + (g - (i - BFHDayOfWeekStart + 7) % 7 + l + 1) + "</td>"; for (l = 1; h >= l; l += 1) k += this.checkMinDate(l, d, e) ? '<td data-day="' + l + '" class="off">' + l + "</td>" : this.checkMaxDate(l, d, e) ? '<td data-day="' + l + '" class="off">' + l + "</td>" : this.checkToday(l, d, e) ? '<td data-day="' + l + '" class="today">' + l + "</td>" : '<td data-day="' + l + '">' + l + "</td>", c(d, e, l) === (6 + BFHDayOfWeekStart) % 7 && (f.append("<tr>" + k + "</tr>"), k = ""); for (l = 1; (7 - (j + 1 - BFHDayOfWeekStart + 7) % 7) % 7 + 1 >= l; l += 1) k += '<td class="off">' + l + "</td>", l === (7 - (j + 1 - BFHDayOfWeekStart + 7) % 7) % 7 && f.append("<tr>" + k + "</tr>") }, updateCalendar: function () { var a, b, c; a = this.$element.find(".bfh-datepicker-calendar"), b = this.$element.data("month"), c = this.$element.data("year"), this.updateCalendarHeader(a, b, c), this.updateCalendarDays(a, b, c) }, previousMonth: function () { var b, c, d; return b = a(this), c = g(b), 0 === Number(c.data("month")) ? (c.data("month", 11), c.data("year", Number(c.data("year")) - 1)) : c.data("month", Number(c.data("month")) - 1), d = c.data("bfhdatepicker"), d.updateCalendar(), !1 }, nextMonth: function () { var b, c, d; return b = a(this), c = g(b), 11 === Number(c.data("month")) ? (c.data("month", 0), c.data("year", Number(c.data("year")) + 1)) : c.data("month", Number(c.data("month")) + 1), d = c.data("bfhdatepicker"), d.updateCalendar(), !1 }, previousYear: function () { var b, c, d; return b = a(this), c = g(b), c.data("year", Number(c.data("year")) - 1), d = c.data("bfhdatepicker"), d.updateCalendar(), !1 }, nextYear: function () { var b, c, d; return b = a(this), c = g(b), c.data("year", Number(c.data("year")) + 1), d = c.data("bfhdatepicker"), d.updateCalendar(), !1 }, select: function (b) { var c, e, h, i, j, k; c = a(this), b.preventDefault(), b.stopPropagation(), e = g(c), h = e.data("bfhdatepicker"), i = e.data("month"), j = e.data("year"), k = c.data("day"), e.val(d(h.options.format, i, j, k)), e.trigger("change.bfhdatepicker"), h.options.close === !0 && f() }, toggle: function (b) { var c, d, e; if (c = a(this), d = g(c), d.is(".disabled") || void 0 !== d.attr("disabled")) return !0; if (e = d.hasClass("open"), f(), !e) { if (d.trigger(b = a.Event("show.bfhdatepicker")), b.isDefaultPrevented()) return !0; d.toggleClass("open").trigger("shown.bfhdatepicker"), c.focus() } return !1 } }; var j = a.fn.bfhdatepicker; a.fn.bfhdatepicker = function (b) { return this.each(function () { var c, d, e; c = a(this), d = c.data("bfhdatepicker"), e = "object" == typeof b && b, this.type = "bfhdatepicker", d || c.data("bfhdatepicker", d = new i(this, e)), "string" == typeof b && d[b].call(c) }) }, a.fn.bfhdatepicker.Constructor = i, a.fn.bfhdatepicker.defaults = { icon: "glyphicon glyphicon-calendar", align: "left", input: "form-control", placeholder: "", name: "", date: "today", format: "m/d/y", min: "", max: "", close: !0 }, a.fn.bfhdatepicker.noConflict = function () { return a.fn.bfhdatepicker = j, this }; var k; a.valHooks.div && (k = a.valHooks.div), a.valHooks.div = { get: function (b) { return a(b).hasClass("bfh-datepicker") ? a(b).find('input[type="text"]').val() : k ? k.get(b) : void 0 }, set: function (b, c) { if (a(b).hasClass("bfh-datepicker")) a(b).find('input[type="text"]').val(c); else if (k) return k.set(b, c) } }, a(document).ready(function () { a("div.bfh-datepicker").each(function () { var b; b = a(this), b.bfhdatepicker(b.data()) }) }), a(document).on("click.bfhdatepicker.data-api", f) }(window.jQuery), +function (a) { "use strict"; var b = function (b, c) { this.options = a.extend({}, a.fn.bfhfonts.defaults, c), this.$element = a(b), this.$element.is("select") && this.addFonts(), this.$element.hasClass("bfh-selectbox") && this.addBootstrapFonts() }; b.prototype = { constructor: b, getFonts: function () { var b, c; if (this.options.available) { c = [], this.options.available = this.options.available.split(","); for (b in BFHFontsList) BFHFontsList.hasOwnProperty(b) && a.inArray(b, this.options.available) >= 0 && (c[b] = BFHFontsList[b]); return c } return BFHFontsList }, addFonts: function () { var a, b, c; a = this.options.font, c = this.getFonts(), this.$element.html(""), this.options.blank === !0 && this.$element.append('<option value=""></option>'); for (b in c) c.hasOwnProperty(b) && this.$element.append('<option value="' + b + '">' + b + "</option>"); this.$element.val(a) }, addBootstrapFonts: function () { var a, b, c, d, e, f; d = this.options.font, a = this.$element.find('input[type="hidden"]'), b = this.$element.find(".bfh-selectbox-option"), c = this.$element.find("[role=option]"), f = this.getFonts(), c.html(""), this.options.blank === !0 && c.append('<li><a tabindex="-1" href="#" data-option=""></a></li>'); for (e in f) f.hasOwnProperty(e) && c.append('<li><a tabindex="-1" href="#" style=\'font-family: ' + f[e] + "' data-option=\"" + e + '">' + e + "</a></li>"); this.$element.val(d) } }; var c = a.fn.bfhfonts; a.fn.bfhfonts = function (c) { return this.each(function () { var d, e, f; d = a(this), e = d.data("bfhfonts"), f = "object" == typeof c && c, e || d.data("bfhfonts", e = new b(this, f)), "string" == typeof c && e[c].call(d) }) }, a.fn.bfhfonts.Constructor = b, a.fn.bfhfonts.defaults = { font: "", available: "", blank: !0 }, a.fn.bfhfonts.noConflict = function () { return a.fn.bfhfonts = c, this }, a(document).ready(function () { a("form select.bfh-fonts, span.bfh-fonts, div.bfh-fonts").each(function () { var b; b = a(this), b.hasClass("bfh-selectbox") && b.bfhselectbox(b.data()), b.bfhfonts(b.data()) }) }) }(window.jQuery), +function (a) { "use strict"; var b = function (b, c) { this.options = a.extend({}, a.fn.bfhfontsizes.defaults, c), this.$element = a(b), this.$element.is("select") && this.addFontSizes(), this.$element.hasClass("bfh-selectbox") && this.addBootstrapFontSizes() }; b.prototype = { constructor: b, getFontsizes: function () { var b, c; if (this.options.available) { c = [], this.options.available = this.options.available.split(","); for (b in BFHFontSizesList) BFHFontSizesList.hasOwnProperty(b) && a.inArray(b, this.options.available) >= 0 && (c[b] = BFHFontSizesList[b]); return c } return BFHFontSizesList }, addFontSizes: function () { var a, b, c; a = this.options.fontsize, c = this.getFontsizes(), this.$element.html(""), this.options.blank === !0 && this.$element.append('<option value=""></option>'); for (b in c) c.hasOwnProperty(b) && this.$element.append('<option value="' + b + '">' + c[b] + "</option>"); this.$element.val(a) }, addBootstrapFontSizes: function () { var a, b, c, d, e, f; d = this.options.fontsize, a = this.$element.find('input[type="hidden"]'), b = this.$element.find(".bfh-selectbox-option"), c = this.$element.find("[role=option]"), f = this.getFontsizes(), c.html(""), this.options.blank === !0 && c.append('<li><a tabindex="-1" href="#" data-option=""></a></li>'); for (e in f) f.hasOwnProperty(e) && c.append('<li><a tabindex="-1" href="#" data-option="' + e + '">' + f[e] + "</a></li>"); this.$element.val(d) } }; var c = a.fn.bfhfontsizes; a.fn.bfhfontsizes = function (c) { return this.each(function () { var d, e, f; d = a(this), e = d.data("bfhfontsizes"), f = "object" == typeof c && c, e || d.data("bfhfontsizes", e = new b(this, f)), "string" == typeof c && e[c].call(d) }) }, a.fn.bfhfontsizes.Constructor = b, a.fn.bfhfontsizes.defaults = { fontsize: "", available: "", blank: !0 }, a.fn.bfhfontsizes.noConflict = function () { return a.fn.bfhfontsizes = c, this }, a(document).ready(function () { a("form select.bfh-fontsizes, span.bfh-fontsizes, div.bfh-fontsizes").each(function () { var b; b = a(this), b.hasClass("bfh-selectbox") && b.bfhselectbox(b.data()), b.bfhfontsizes(b.data()) }) }) }(window.jQuery), +function (a) { "use strict"; var b = function (b, c) { this.options = a.extend({}, a.fn.bfhgooglefonts.defaults, c), this.$element = a(b), this.$element.is("select") && this.addFonts(), this.$element.hasClass("bfh-selectbox") && this.addBootstrapFonts() }; b.prototype = { constructor: b, getFonts: function () { var b, c; if (c = [], this.options.subset) for (b in BFHGoogleFontsList.items) BFHGoogleFontsList.items.hasOwnProperty(b) && a.inArray(this.options.subset, BFHGoogleFontsList.items[b].subsets) >= 0 && (c[BFHGoogleFontsList.items[b].family] = { info: BFHGoogleFontsList.items[b], index: parseInt(b, 10) }); else if (this.options.available) { this.options.available = this.options.available.split(","); for (b in BFHGoogleFontsList.items) BFHGoogleFontsList.items.hasOwnProperty(b) && a.inArray(BFHGoogleFontsList.items[b].family, this.options.available) >= 0 && (c[BFHGoogleFontsList.items[b].family] = { info: BFHGoogleFontsList.items[b], index: parseInt(b, 10) }) } else for (b in BFHGoogleFontsList.items) BFHGoogleFontsList.items.hasOwnProperty(b) && (c[BFHGoogleFontsList.items[b].family] = { info: BFHGoogleFontsList.items[b], index: parseInt(b, 10) }); return c }, addFonts: function () { var a, b, c; a = this.options.font, c = this.getFonts(), this.$element.html(""), this.options.blank === !0 && this.$element.append('<option value=""></option>'); for (b in c) c.hasOwnProperty(b) && this.$element.append('<option value="' + c[b].info.family + '">' + c[b].info.family + "</option>"); this.$element.val(a) }, addBootstrapFonts: function () { var a, b, c, d, e, f; d = this.options.font, a = this.$element.find('input[type="hidden"]'), b = this.$element.find(".bfh-selectbox-option"), c = this.$element.find("[role=option]"), f = this.getFonts(), c.html(""), this.options.blank === !0 && c.append('<li><a tabindex="-1" href="#" data-option="" style="background-image: none;"></a></li>'); for (e in f) f.hasOwnProperty(e) && c.append('<li><a tabindex="-1" href="#" style="background-position: 0 -' + (30 * f[e].index - 2) + 'px;" data-option="' + f[e].info.family + '">' + f[e].info.family + "</a></li>"); this.$element.val(d) } }; var c = a.fn.bfhgooglefonts; a.fn.bfhgooglefonts = function (c) { return this.each(function () { var d, e, f; d = a(this), e = d.data("bfhgooglefonts"), f = "object" == typeof c && c, e || d.data("bfhgooglefonts", e = new b(this, f)), "string" == typeof c && e[c].call(d) }) }, a.fn.bfhgooglefonts.Constructor = b, a.fn.bfhgooglefonts.defaults = { font: "", available: "", subset: "", blank: !0 }, a.fn.bfhgooglefonts.noConflict = function () { return a.fn.bfhgooglefonts = c, this }, a(document).ready(function () { a("form select.bfh-googlefonts, span.bfh-googlefonts, div.bfh-googlefonts").each(function () { var b; b = a(this), b.hasClass("bfh-selectbox") && b.bfhselectbox(b.data()), b.bfhgooglefonts(b.data()) }) }) }(window.jQuery), +function (a) { "use strict"; var b = function (b, c) { this.options = a.extend({}, a.fn.bfhlanguages.defaults, c), this.$element = a(b), this.$element.is("select") && this.addLanguages(), this.$element.is("span") && this.displayLanguage(), this.$element.hasClass("bfh-selectbox") && this.addBootstrapLanguages() }; b.prototype = { constructor: b, getLanguages: function () { var a, b, c; if (this.options.available) { c = [], this.options.available = this.options.available.split(","); for (b in this.options.available) this.options.available.hasOwnProperty(b) && (-1 !== this.options.available[b].indexOf("_") ? (a = this.options.available[b].split("_"), c[a[0]] = { name: BFHLanguagesList[a[0]], country: a[1] }) : c[this.options.available[b]] = BFHLanguagesList[this.options.available[b]]); return c } return BFHLanguagesList }, addLanguages: function () { var a, b, c; a = this.options.language, b = this.getLanguages(), this.$element.html(""), this.options.blank === !0 && this.$element.append('<option value=""></option>'); for (c in b) b.hasOwnProperty(c) && (b[c].hasOwnProperty("name") ? this.$element.append('<option value="' + c + "_" + b[c].country + '">' + b[c].name.toProperCase() + " (" + BFHCountriesList[b[c].country] + ")</option>") : this.$element.append('<option value="' + c + '">' + b[c].toProperCase() + "</option>")); this.$element.val(a) }, addBootstrapLanguages: function () { var a, b, c, d, e, f; d = this.options.language, a = this.$element.find('input[type="hidden"]'), b = this.$element.find(".bfh-selectbox-option"), c = this.$element.find("[role=option]"), e = this.getLanguages(), c.html(""), this.options.blank === !0 && c.append('<li><a tabindex="-1" href="#" data-option=""></a></li>'); for (f in e) e.hasOwnProperty(f) && (e[f].hasOwnProperty("name") ? this.options.flags === !0 ? c.append('<li><a tabindex="-1" href="#" data-option="' + f + "_" + e[f].country + '"><i class="fa bfh-flag-' + e[f].country + '"></i>' + e[f].name.toProperCase() + "</a></li>") : c.append('<li><a tabindex="-1" href="#" data-option="' + f + "_" + e[f].country + '">' + e[f].name.toProperCase() + " (" + BFHCountriesList[e[f].country] + ")</a></li>") : c.append('<li><a tabindex="-1" href="#" data-option="' + f + '">' + e[f] + "</a></li>")); this.$element.val(d) }, displayLanguage: function () { var a; a = this.options.language, -1 !== a.indexOf("_") ? (a = a.split("_"), this.options.flags === !0 ? this.$element.html('<i class="fa bfh-flag-' + a[1] + '"></i> ' + BFHLanguagesList[a[0]].toProperCase()) : this.$element.html(BFHLanguagesList[a[0]].toProperCase() + " (" + BFHCountriesList[a[1]] + ")")) : this.$element.html(BFHLanguagesList[a].toProperCase()) } }; var c = a.fn.bfhlanguages; a.fn.bfhlanguages = function (c) { return this.each(function () { var d, e, f; d = a(this), e = d.data("bfhlanguages"), f = "object" == typeof c && c, e || d.data("bfhlanguages", e = new b(this, f)), "string" == typeof c && e[c].call(d) }) }, a.fn.bfhlanguages.Constructor = b, a.fn.bfhlanguages.defaults = { language: "", available: "", flags: !1, blank: !0 }, a.fn.bfhlanguages.noConflict = function () { return a.fn.bfhlanguages = c, this }, a(document).ready(function () { a("form select.bfh-languages, span.bfh-languages, div.bfh-languages").each(function () { var b; b = a(this), b.hasClass("bfh-selectbox") && b.bfhselectbox(b.data()), b.bfhlanguages(b.data()) }) }), String.prototype.toProperCase = function () { return this.replace(/\w\S*/g, function (a) { return a.charAt(0).toUpperCase() + a.substr(1).toLowerCase() }) } }(window.jQuery), +function (a) { "use strict"; var b = function (b, c) { this.options = a.extend({}, a.fn.bfhnumber.defaults, c), this.$element = a(b), this.initInput() }; b.prototype = { constructor: b, initInput: function () { this.options.buttons === !0 && (this.$element.wrap('<div class="input-group"></div>'), this.$element.parent().append('<span class="input-group-addon bfh-number-btn inc"><span class="glyphicon glyphicon-chevron-up"></span></span>'), this.$element.parent().append('<span class="input-group-addon bfh-number-btn dec"><span class="glyphicon glyphicon-chevron-down"></span></span>')), this.$element.on("change.bfhnumber.data-api", b.prototype.change), this.options.keyboard === !0 && this.$element.on("keydown.bfhnumber.data-api", b.prototype.keydown), this.options.buttons === !0 && this.$element.parent().on("mousedown.bfhnumber.data-api", ".inc", b.prototype.btninc).on("mousedown.bfhnumber.data-api", ".dec", b.prototype.btndec), this.formatNumber() }, keydown: function (b) { var c; if (c = a(this).data("bfhnumber"), c.$element.is(".disabled") || void 0 !== c.$element.attr("disabled")) return !0; switch (b.which) { case 38: c.increment(); break; case 40: c.decrement() } return !0 }, mouseup: function (a) { var b, c, d; b = a.data.btn, c = b.$element.data("timer"), d = b.$element.data("interval"), clearTimeout(c), clearInterval(d) }, btninc: function () { var c, d; return c = a(this).parent().find(".bfh-number").data("bfhnumber"), c.$element.is(".disabled") || void 0 !== c.$element.attr("disabled") ? !0 : (c.increment(), d = setTimeout(function () { var a; a = setInterval(function () { c.increment() }, 80), c.$element.data("interval", a) }, 750), c.$element.data("timer", d), a(document).one("mouseup", { btn: c }, b.prototype.mouseup), !0) }, btndec: function () { var c, d; return c = a(this).parent().find(".bfh-number").data("bfhnumber"), c.$element.is(".disabled") || void 0 !== c.$element.attr("disabled") ? !0 : (c.decrement(), d = setTimeout(function () { var a; a = setInterval(function () { c.decrement() }, 80), c.$element.data("interval", a) }, 750), c.$element.data("timer", d), a(document).one("mouseup", { btn: c }, b.prototype.mouseup), !0) }, change: function () { var b; return b = a(this).data("bfhnumber"), b.$element.is(".disabled") || void 0 !== b.$element.attr("disabled") ? !0 : (b.formatNumber(), !0) }, increment: function () { var a; a = this.getValue(), a += 1, this.$element.val(a).change() }, decrement: function () { var a; a = this.getValue(), a -= 1, this.$element.val(a).change() }, getValue: function () { var a; return a = this.$element.val(), "-1" !== a && (a = String(a).replace(/\D/g, "")), 0 === String(a).length && (a = this.options.min), parseInt(a) }, formatNumber: function () { var a, b, c, d; if (a = this.getValue(), a > this.options.max && (a = this.options.wrap === !0 ? this.options.min : this.options.max), a < this.options.min && (a = this.options.wrap === !0 ? this.options.max : this.options.min), this.options.zeros === !0) for (b = String(this.options.max).length, c = String(a).length, d = c; b > d; d += 1) a = "0" + a; a !== this.$element.val() && this.$element.val(a) } }; var c = a.fn.bfhnumber; a.fn.bfhnumber = function (c) { return this.each(function () { var d, e, f; d = a(this), e = d.data("bfhnumber"), f = "object" == typeof c && c, e || d.data("bfhnumber", e = new b(this, f)), "string" == typeof c && e[c].call(d) }) }, a.fn.bfhnumber.Constructor = b, a.fn.bfhnumber.defaults = { min: 0, max: 9999, zeros: !1, keyboard: !0, buttons: !0, wrap: !1 }, a.fn.bfhnumber.noConflict = function () { return a.fn.bfhnumber = c, this }, a(document).ready(function () { a('form input[type="text"].bfh-number, form input[type="number"].bfh-number').each(function () { var b; b = a(this), b.bfhnumber(b.data()) }) }) }(window.jQuery), +function (a) {
    "use strict"; function b(a, b) { var c, d, e, f; for (c = "", b = String(b).replace(/\D/g, ""), d = 0, e = 0; d < a.length; d += 1) /\d/g.test(a.charAt(d)) ? a.charAt(d) === b.charAt(e) ? (c += b.charAt(e), e += 1) : c += a.charAt(d) : "d" !== a.charAt(d) ? ("" !== b.charAt(e) || "+" === a.charAt(d)) && (c += a.charAt(d)) : "" === b.charAt(e) ? c += "" : (c += b.charAt(e), e += 1); return f = a.charAt(c.length), "d" !== f && (c += f), c } function c(a) { var b, c = 0; return document.selection ? (a.focus(), b = document.selection.createRange(), b.moveStart("character", -a.value.length), c = b.text.length) : (a.selectionStart || 0 === a.selectionStart) && (c = a.selectionStart), c } function d(a, b) { var c; document.selection ? (a.focus(), c = document.selection.createRange(), c.moveStart("character", -a.value.length), c.moveStart("character", b), c.moveEnd("character", 0), c.select()) : (a.selectionStart || 0 === a.selectionStart) && (a.selectionStart = b, a.selectionEnd = b, a.focus()) } var e = function (b, c) {
        this.options = a.extend({}, a.fn.bfhphone.defaults, c), this.$element = a(b), (this.$element.is('input[type="text"]') || this.$element.is('input[type="tel"]')) && this.addFormatter(), this.$element.is("span") && this.displayFormatter()
    }; e.prototype = { constructor: e, addFormatter: function () { var b; "" !== this.options.country && (b = a(document).find("#" + this.options.country), 0 !== b.length ? (this.options.format = BFHPhoneFormatList[b.val()], b.on("change", { phone: this }, this.changeCountry)) : this.options.format = BFHPhoneFormatList[this.options.country]), this.$element.on("keyup.bfhphone.data-api", e.prototype.change), this.loadFormatter() }, loadFormatter: function () { var a; a = b(this.options.format, this.$element.val()), this.$element.val(a) }, displayFormatter: function () { var a; "" !== this.options.country && (this.options.format = BFHPhoneFormatList[this.options.country]), a = b(this.options.format, this.options.number), this.$element.html(a) }, changeCountry: function (b) { var c, d; c = a(this), d = b.data.phone, d.$element.val(String(d.$element.val()).replace(/\+\d*/g, "")), d.options.format = BFHPhoneFormatList[c.val()], d.loadFormatter() }, change: function (e) { var f, g, h, i; return f = a(this).data("bfhphone"), f.$element.is(".disabled") || void 0 !== f.$element.attr("disabled") ? !0 : (g = c(f.$element[0]), h = !1, g === f.$element.val().length && (h = !0), 8 === e.which && "d" !== f.options.format.charAt(f.$element.val().length) && f.$element.val(String(f.$element.val()).substring(0, f.$element.val().length - 1)), i = b(f.options.format, f.$element.val()), i === f.$element.val() ? !0 : (f.$element.val(i), h && (g = f.$element.val().length), d(f.$element[0], g), !0)) } }; var f = a.fn.bfhphone; a.fn.bfhphone = function (b) { return this.each(function () { var c, d, f; c = a(this), d = c.data("bfhphone"), f = "object" == typeof b && b, d || c.data("bfhphone", d = new e(this, f)), "string" == typeof b && d[b].call(c) }) }, a.fn.bfhphone.Constructor = e, a.fn.bfhphone.defaults = { format: "", number: "", country: "" }, a.fn.bfhphone.noConflict = function () { return a.fn.bfhphone = f, this }, a(document).ready(function () { a('form input[type="text"].bfh-phone, form input[type="tel"].bfh-phone, span.bfh-phone').each(function () { var b; b = a(this), b.bfhphone(b.data()) }) })
}(window.jQuery), +function (a) { "use strict"; function b() { var b; a(d).each(function (d) { return b = c(a(this)), b.hasClass("open") ? (b.trigger(d = a.Event("hide.bfhselectbox")), d.isDefaultPrevented() ? !0 : (b.removeClass("open").trigger("hidden.bfhselectbox"), void 0)) : !0 }) } function c(a) { return a.closest(".bfh-selectbox") } var d = "[data-toggle=bfh-selectbox]", e = function (b, c) { this.options = a.extend({}, a.fn.bfhselectbox.defaults, c), this.$element = a(b), this.initSelectBox() }; e.prototype = { constructor: e, initSelectBox: function () { var b; b = "", this.$element.find("div").each(function () { b = b + '<li><a tabindex="-1" href="#" data-option="' + a(this).data("value") + '">' + a(this).html() + "</a></li>" }), this.$element.html('<input type="hidden" name="' + this.options.name + '" value="">' + '<a class="bfh-selectbox-toggle ' + this.options.input + '" role="button" data-toggle="bfh-selectbox" href="#">' + '<span class="bfh-selectbox-option"></span>' + '<span class="' + this.options.icon + ' selectbox-caret"></span>' + "</a>" + '<div class="bfh-selectbox-options">' + '<div role="listbox">' + '<ul role="option">' + "</ul>" + "</div>" + "</div>"), this.$element.find("[role=option]").html(b), this.options.filter === !0 && this.$element.find(".bfh-selectbox-options").prepend('<div class="bfh-selectbox-filter-container"><input type="text" class="bfh-selectbox-filter form-control"></div>'), this.$element.val(this.options.value), this.$element.on("click.bfhselectbox.data-api touchstart.bfhselectbox.data-api", d, e.prototype.toggle).on("keydown.bfhselectbox.data-api", d + ", [role=option]", e.prototype.keydown).on("mouseenter.bfhselectbox.data-api", "[role=option] > li > a", e.prototype.mouseenter).on("click.bfhselectbox.data-api", "[role=option] > li > a", e.prototype.select).on("click.bfhselectbox.data-api", ".bfh-selectbox-filter", function () { return !1 }).on("propertychange.bfhselectbox.data-api change.bfhselectbox.data-api input.bfhselectbox.data-api paste.bfhselectbox.data-api", ".bfh-selectbox-filter", e.prototype.filter) }, toggle: function (d) { var e, f, g; if (e = a(this), f = c(e), f.is(".disabled") || void 0 !== f.attr("disabled")) return !0; if (g = f.hasClass("open"), b(), !g) { if (f.trigger(d = a.Event("show.bfhselectbox")), d.isDefaultPrevented()) return !0; f.toggleClass("open").trigger("shown.bfhselectbox").find('[role=option] > li > [data-option="' + f.val() + '"]').focus() } return !1 }, filter: function () { var b, d, e; b = a(this), d = c(b), e = a("[role=option] li a", d), e.hide().filter(function () { return -1 !== a(this).text().toUpperCase().indexOf(b.val().toUpperCase()) }).show() }, keydown: function (b) { var f, g, h, i, j; return /(38|40|27)/.test(b.keyCode) ? (f = a(this), b.preventDefault(), b.stopPropagation(), h = c(f), i = h.hasClass("open"), !i || i && 27 === b.keyCode ? (27 === b.which && h.find(d).focus(), f.click()) : (g = a("[role=option] li:not(.divider) a:visible", h), g.length ? (a("body").off("mouseenter.bfh-selectbox.data-api", "[role=option] > li > a", e.prototype.mouseenter), j = g.index(g.filter(":focus")), 38 === b.keyCode && j > 0 && (j -= 1), 40 === b.keyCode && j < g.length - 1 && (j += 1), j || (j = 0), g.eq(j).focus(), a("body").on("mouseenter.bfh-selectbox.data-api", "[role=option] > li > a", e.prototype.mouseenter), void 0) : !0)) : !0 }, mouseenter: function () { var b; b = a(this), b.focus() }, select: function (d) { var e, f; return e = a(this), d.preventDefault(), d.stopPropagation(), e.is(".disabled") || void 0 !== e.attr("disabled") ? !0 : (f = c(e), f.val(e.data("option")), f.trigger("change.bfhselectbox"), b(), void 0) } }; var f = a.fn.bfhselectbox; a.fn.bfhselectbox = function (b) { return this.each(function () { var c, d, f; c = a(this), d = c.data("bfhselectbox"), f = "object" == typeof b && b, this.type = "bfhselectbox", d || c.data("bfhselectbox", d = new e(this, f)), "string" == typeof b && d[b].call(c) }) }, a.fn.bfhselectbox.Constructor = e, a.fn.bfhselectbox.defaults = { icon: "caret", input: "form-control", name: "", value: "", filter: !1 }, a.fn.bfhselectbox.noConflict = function () { return a.fn.bfhselectbox = f, this }; var g; a.valHooks.div && (g = a.valHooks.div), a.valHooks.div = { get: function (b) { return a(b).hasClass("bfh-selectbox") ? a(b).find('input[type="hidden"]').val() : g ? g.get(b) : void 0 }, set: function (b, c) { var d, e; if (a(b).hasClass("bfh-selectbox")) d = a(b), d.find("li a[data-option='" + c + "']").length > 0 ? e = d.find("li a[data-option='" + c + "']").html() : d.find("li a").length > 0 ? e = d.find("li a").eq(0).html() : (c = "", e = ""), d.find('input[type="hidden"]').val(c), d.find(".bfh-selectbox-option").html(e); else if (g) return g.set(b, c) } }, a(document).ready(function () { a("div.bfh-selectbox").each(function () { var b; b = a(this), b.bfhselectbox(b.data()) }) }), a(document).on("click.bfhselectbox.data-api", b) }(window.jQuery), +function (a) { "use strict"; var b = function (b, c) { this.options = a.extend({}, a.fn.bfhslider.defaults, c), this.$element = a(b), this.initSlider() }; b.prototype = { constructor: b, initSlider: function () { "" === this.options.value && (this.options.value = this.options.min), this.$element.html('<input type="hidden" name="' + this.options.name + '" value="">' + '<div class="bfh-slider-handle"><div class="bfh-slider-value"></div></div>'), this.$element.find('input[type="hidden"]').val(this.options.value), this.updateHandle(this.options.value), this.$element.on("mousedown.bfhslider.data-api", b.prototype.mouseDown) }, updateHandle: function (a) { var b, c, d, e; e = this.options.max - this.options.min, c = this.$element.width(), d = this.$element.position().left, b = Math.round((a - this.options.min) * (c - 20) / e + d), this.$element.find(".bfh-slider-handle").css("left", b + "px"), this.$element.find(".bfh-slider-value").text(a) }, updateVal: function (a) { var b, c, d, e, f; return f = this.options.max - this.options.min, b = this.$element.width(), c = this.$element.offset().left, d = c + b, c > a && (a = c), a + 20 > d && (a = d), e = (a - c) / b, e = Math.ceil(e * f + this.options.min), e === this.$element.val() ? !0 : (this.$element.val(e), this.$element.trigger("change.bfhslider"), void 0) }, mouseDown: function () { var c; return c = a(this), c.is(".disabled") || void 0 !== c.attr("disabled") ? !0 : (a(document).on("mousemove.bfhslider.data-api", { slider: c }, b.prototype.mouseMove).one("mouseup.bfhslider.data-api", { slider: c }, b.prototype.mouseUp), void 0) }, mouseMove: function (a) { var b; b = a.data.slider, b.data("bfhslider").updateVal(a.pageX) }, mouseUp: function (b) { var c; c = b.data.slider, c.data("bfhslider").updateVal(b.pageX), a(document).off("mousemove.bfhslider.data-api") } }; var c = a.fn.bfhslider; a.fn.bfhslider = function (c) { return this.each(function () { var d, e, f; d = a(this), e = d.data("bfhslider"), f = "object" == typeof c && c, this.type = "bfhslider", e || d.data("bfhslider", e = new b(this, f)), "string" == typeof c && e[c].call(d) }) }, a.fn.bfhslider.Constructor = b, a.fn.bfhslider.defaults = { name: "", value: "", min: 0, max: 100 }, a.fn.bfhslider.noConflict = function () { return a.fn.bfhslider = c, this }; var d; a.valHooks.div && (d = a.valHooks.div), a.valHooks.div = { get: function (b) { return a(b).hasClass("bfh-slider") ? a(b).find('input[type="hidden"]').val() : d ? d.get(b) : void 0 }, set: function (b, c) { if (a(b).hasClass("bfh-slider")) a(b).find('input[type="hidden"]').val(c), a(b).data("bfhslider").updateHandle(c); else if (d) return d.set(b, c) } }, a(document).ready(function () { a("div.bfh-slider").each(function () { var b; b = a(this), b.bfhslider(b.data()) }) }) }(window.jQuery), +function (a) { "use strict"; var b = function (b, c) { this.options = a.extend({}, a.fn.bfhstates.defaults, c), this.$element = a(b), this.$element.is("select") && this.addStates(), this.$element.hasClass("bfh-selectbox") && this.addBootstrapStates(), this.$element.is("span") && this.displayState() }; b.prototype = { constructor: b, addStates: function () { var b, c; b = this.options.country, "" !== b && (c = a(document).find("#" + b), 0 !== c.length && (b = c.val(), c.on("change", { state: this }, this.changeCountry))), this.loadStates(b) }, loadStates: function (a) { var b, c; b = this.options.state, this.$element.html(""), this.options.blank === !0 && this.$element.append('<option value=""></option>'); for (c in BFHStatesList[a]) BFHStatesList[a].hasOwnProperty(c) && this.$element.append('<option value="' + BFHStatesList[a][c].code + '">' + BFHStatesList[a][c].name + "</option>"); this.$element.val(b) }, changeCountry: function (b) { var c, d, e; c = a(this), d = b.data.state, e = c.val(), d.loadStates(e) }, addBootstrapStates: function () { var b, c; b = this.options.country, "" !== b && (c = a(document).find("#" + b), 0 !== c.length && (b = c.find('input[type="hidden"]').val(), c.on("change.bfhselectbox", { state: this }, this.changeBootstrapCountry))), this.loadBootstrapStates(b) }, loadBootstrapStates: function (a) { var b, c, d, e, f, g; e = this.options.state, f = "", b = this.$element.find('input[type="hidden"]'), c = this.$element.find(".bfh-selectbox-option"), d = this.$element.find("[role=option]"), d.html(""), this.options.blank === !0 && d.append('<li><a tabindex="-1" href="#" data-option=""></a></li>'); for (g in BFHStatesList[a]) BFHStatesList[a].hasOwnProperty(g) && (d.append('<li><a tabindex="-1" href="#" data-option="' + BFHStatesList[a][g].code + '">' + BFHStatesList[a][g].name + "</a></li>"), BFHStatesList[a][g].code === e && (f = BFHStatesList[a][g].name)); this.$element.val(e) }, changeBootstrapCountry: function (b) { var c, d, e; c = a(this), d = b.data.state, e = c.val(), d.loadBootstrapStates(e) }, displayState: function () { var a, b, c, d; a = this.options.country, b = this.options.state, c = ""; for (d in BFHStatesList[a]) if (BFHStatesList[a].hasOwnProperty(d) && BFHStatesList[a][d].code === b) { c = BFHStatesList[a][d].name; break } this.$element.html(c) } }; var c = a.fn.bfhstates; a.fn.bfhstates = function (c) { return this.each(function () { var d, e, f; d = a(this), e = d.data("bfhstates"), f = "object" == typeof c && c, e || d.data("bfhstates", e = new b(this, f)), "string" == typeof c && e[c].call(d) }) }, a.fn.bfhstates.Constructor = b, a.fn.bfhstates.defaults = { country: "", state: "", blank: !0 }, a.fn.bfhstates.noConflict = function () { return a.fn.bfhstates = c, this }, a(document).ready(function () { a("form select.bfh-states, span.bfh-states, div.bfh-states").each(function () { var b; b = a(this), b.hasClass("bfh-selectbox") && b.bfhselectbox(b.data()), b.bfhstates(b.data()) }) }) }(window.jQuery), +function (a) { "use strict"; function b(a, b) { return a = String(a), 1 === a.length && (a = "0" + a), b = String(b), 1 === b.length && (b = "0" + b), a + BFHTimePickerDelimiter + b } function c() { var b; a(e).each(function (c) { return b = d(a(this)), b.hasClass("open") ? (b.trigger(c = a.Event("hide.bfhtimepicker")), c.isDefaultPrevented() ? !0 : (b.removeClass("open").trigger("hidden.bfhtimepicker"), void 0)) : !0 }) } function d(a) { return a.closest(".bfh-timepicker") } var e = "[data-toggle=bfh-timepicker]", f = function (b, c) { this.options = a.extend({}, a.fn.bfhtimepicker.defaults, c), this.$element = a(b), this.initPopover() }; f.prototype = { constructor: f, setTime: function () { var a, c, d, e, f, g, h; a = this.options.time, g = "", h = "", "" === a || "now" === a || void 0 === a ? (c = new Date, e = c.getHours(), f = c.getMinutes(), "12h" === this.options.mode && (e > 12 ? (e -= 12, g = " " + BFHTimePickerModes.pm, h = "pm") : (g = " " + BFHTimePickerModes.am, h = "am")), "now" === a && this.$element.find('.bfh-timepicker-toggle > input[type="text"]').val(b(e, f) + g), this.$element.data("hour", e), this.$element.data("minute", f), this.$element.data("mode", h)) : (d = String(a).split(BFHTimePickerDelimiter), e = d[0], f = d[1], "12h" === this.options.mode && (d = String(f).split(" "), f = d[0], h = d[1] === BFHTimePickerModes.pm ? "pm" : "am"), this.$element.find('.bfh-timepicker-toggle > input[type="text"]').val(a), this.$element.data("hour", e), this.$element.data("minute", f), this.$element.data("mode", h)) }, initPopover: function () { var b, c, d, g, h; b = "", c = "", d = "", "" !== this.options.icon && ("right" === this.options.align ? c = '<span class="input-group-addon"><i class="' + this.options.icon + '"></i></span>' : b = '<span class="input-group-addon"><i class="' + this.options.icon + '"></i></span>', d = "input-group"), g = "", h = "23", "12h" === this.options.mode && (g = '<td><div class="bfh-selectbox" data-input="' + this.options.input + '" data-value="am">' + '<div data-value="am">' + BFHTimePickerModes.am + "</div>" + '<div data-value="pm">' + BFHTimePickerModes.pm + "</div>" + "</div>", h = "11"), this.$element.html('<div class="' + d + ' bfh-timepicker-toggle" data-toggle="bfh-timepicker">' + b + '<input type="text" name="' + this.options.name + '" class="' + this.options.input + '" placeholder="' + this.options.placeholder + '" readonly>' + c + "</div>" + '<div class="bfh-timepicker-popover">' + '<table class="table">' + "<tbody>" + "<tr>" + '<td class="hour">' + '<input type="text" class="' + this.options.input + ' bfh-number"  data-min="0" data-max="' + h + '" data-zeros="true" data-wrap="true">' + "</td>" + '<td class="separator">' + BFHTimePickerDelimiter + "</td>" + '<td class="minute">' + '<input type="text" class="' + this.options.input + ' bfh-number"  data-min="0" data-max="59" data-zeros="true" data-wrap="true">' + "</td>" + g + "</tr>" + "</tbody>" + "</table>" + "</div>"), this.$element.on("click.bfhtimepicker.data-api touchstart.bfhtimepicker.data-api", e, f.prototype.toggle).on("click.bfhtimepicker.data-api touchstart.bfhtimepicker.data-api", ".bfh-timepicker-popover > table", function () { return !1 }), this.$element.find(".bfh-number").each(function () { var b; b = a(this), b.bfhnumber(b.data()), b.on("change", f.prototype.change) }), this.$element.find(".bfh-selectbox").each(function () { var b; b = a(this), b.bfhselectbox(b.data()), b.on("change.bfhselectbox", f.prototype.change) }), this.setTime(), this.updatePopover() }, updatePopover: function () { var a, b, c; a = this.$element.data("hour"), b = this.$element.data("minute"), c = this.$element.data("mode"), this.$element.find(".hour input[type=text]").val(a).change(), this.$element.find(".minute input[type=text]").val(b).change(), this.$element.find(".bfh-selectbox").val(c) }, change: function () { var b, c, e, f; return b = a(this), c = d(b), e = c.data("bfhtimepicker"), e && "undefined" !== e && (f = "", "12h" === e.options.mode && (f = " " + BFHTimePickerModes[c.find(".bfh-selectbox").val()]), c.find('.bfh-timepicker-toggle > input[type="text"]').val(c.find(".hour input[type=text]").val() + BFHTimePickerDelimiter + c.find(".minute input[type=text]").val() + f), c.trigger("change.bfhtimepicker")), !1 }, toggle: function (b) { var e, f, g; if (e = a(this), f = d(e), f.is(".disabled") || void 0 !== f.attr("disabled")) return !0; if (g = f.hasClass("open"), c(), !g) { if (f.trigger(b = a.Event("show.bfhtimepicker")), b.isDefaultPrevented()) return !0; f.toggleClass("open").trigger("shown.bfhtimepicker"), e.focus() } return !1 } }; var g = a.fn.bfhtimepicker; a.fn.bfhtimepicker = function (b) { return this.each(function () { var c, d, e; c = a(this), d = c.data("bfhtimepicker"), e = "object" == typeof b && b, this.type = "bfhtimepicker", d || c.data("bfhtimepicker", d = new f(this, e)), "string" == typeof b && d[b].call(c) }) }, a.fn.bfhtimepicker.Constructor = f, a.fn.bfhtimepicker.defaults = { icon: "glyphicon glyphicon-time", align: "left", input: "form-control", placeholder: "", name: "", time: "now", mode: "24h" }, a.fn.bfhtimepicker.noConflict = function () { return a.fn.bfhtimepicker = g, this }; var h; a.valHooks.div && (h = a.valHooks.div), a.valHooks.div = { get: function (b) { return a(b).hasClass("bfh-timepicker") ? a(b).find('.bfh-timepicker-toggle > input[type="text"]').val() : h ? h.get(b) : void 0 }, set: function (b, c) { var d; if (a(b).hasClass("bfh-timepicker")) d = a(b).data("bfhtimepicker"), d.options.time = c, d.setTime(), d.updatePopover(); else if (h) return h.set(b, c) } }, a(document).ready(function () { a("div.bfh-timepicker").each(function () { var b; b = a(this), b.bfhtimepicker(b.data()) }) }), a(document).on("click.bfhtimepicker.data-api", c) }(window.jQuery), +function (a) { "use strict"; var b = function (b, c) { this.options = a.extend({}, a.fn.bfhtimezones.defaults, c), this.$element = a(b), this.$element.is("select") && this.addTimezones(), this.$element.hasClass("bfh-selectbox") && this.addBootstrapTimezones() }; b.prototype = { constructor: b, addTimezones: function () { var b, c; b = this.options.country, "" !== b && (c = a(document).find("#" + b), 0 !== c.length && (b = c.val(), c.on("change", { timezone: this }, this.changeCountry))), this.loadTimezones(b) }, loadTimezones: function (a) { var b, c; b = this.options.timezone, this.$element.html(""), this.options.blank === !0 && this.$element.append('<option value=""></option>'); for (c in BFHTimezonesList[a]) BFHTimezonesList[a].hasOwnProperty(c) && this.$element.append('<option value="' + c + '">' + BFHTimezonesList[a][c] + "</option>"); this.$element.val(b) }, changeCountry: function (b) { var c, d, e; c = a(this), d = b.data.timezone, e = c.val(), d.loadTimezones(e) }, addBootstrapTimezones: function () { var b, c; b = this.options.country, "" !== b && (c = a(document).find("#" + b), 0 !== c.length && (b = c.find('input[type="hidden"]').val(), c.on("change.bfhselectbox", { timezone: this }, this.changeBootstrapCountry))), this.loadBootstrapTimezones(b) }, loadBootstrapTimezones: function (a) { var b, c, d, e, f; e = this.options.timezone, b = this.$element.find('input[type="hidden"]'), c = this.$element.find(".bfh-selectbox-option"), d = this.$element.find("[role=option]"), d.html(""), this.options.blank === !0 && d.append('<li><a tabindex="-1" href="#" data-option=""></a></li>'); for (f in BFHTimezonesList[a]) BFHTimezonesList[a].hasOwnProperty(f) && d.append('<li><a tabindex="-1" href="#" data-option="' + f + '">' + BFHTimezonesList[a][f] + "</a></li>"); this.$element.val(e) }, changeBootstrapCountry: function (b) { var c, d, e; c = a(this), d = b.data.timezone, e = c.val(), d.loadBootstrapTimezones(e) } }; var c = a.fn.bfhtimezones; a.fn.bfhtimezones = function (c) { return this.each(function () { var d, e, f; d = a(this), e = d.data("bfhtimezones"), f = "object" == typeof c && c, e || d.data("bfhtimezones", e = new b(this, f)), "string" == typeof c && e[c].call(d) }) }, a.fn.bfhtimezones.Constructor = b, a.fn.bfhtimezones.defaults = { country: "", timezone: "", blank: !0 }, a.fn.bfhtimezones.noConflict = function () { return a.fn.bfhtimezones = c, this }, a(document).ready(function () { a("form select.bfh-timezones, div.bfh-timezones").each(function () { var b; b = a(this), b.hasClass("bfh-selectbox") && b.bfhselectbox(b.data()), b.bfhtimezones(b.data()) }) }) }(window.jQuery);